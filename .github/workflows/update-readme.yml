name: Update README with TOC

on:
  push:
    branches: [main]
    paths:
      - "**/*.pptx"
  pull_request:
    branches: [main]
    paths:
      - "**/*.pptx"

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-pptx

      - name: Generate TOC and Presentations Content
        run: |
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
          function get_presentation_toc() {
            local file=$1
            python3 -c "
import sys
from pptx import Presentation
try:
    prs = Presentation('$file')
    print('## ' + '$file'.split('/')[-1].replace('.pptx', ''))
    print('')
    for i, slide in enumerate(prs.slides, 1):
        title = ''
        for shape in slide.shapes:
            if hasattr(shape, 'text'):
                title = shape.text.strip()
                if title:
                    break
        if not title:
            title = f'–°–ª–∞–π–¥ {i}'
        print(f'- {title}')
    print('')
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}')
"
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è presentations.md –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          function create_presentations_md() {
            local dir=$1
            local md_file="$dir/presentations.md"
            
            echo "# –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $(basename "$dir")" > "$md_file"
            echo "" >> "$md_file"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .pptx —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for file in $(find "$dir" -maxdepth 1 -name "*.pptx" | sort); do
              get_presentation_toc "$file" >> "$md_file"
            done
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
          function create_progress_bar() {
            local current=$1
            local total=$2
            local width=20
            local filled=$((current * width / total))
            local empty=$((width - filled))
            local percentage=$((current * 100 / total))
            local bar=""
            for ((i=0; i<filled; i++)); do
              bar+="‚ñà"
            done
            for ((i=0; i<empty; i++)); do
              bar+="‚ñë"
            done
            echo "\`\`\`diff"
            echo "+ $bar ($current/$total) - $percentage%"
            echo "\`\`\`"
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
          function create_link() {
            local path=$1
            local title=$(basename "$path" | sed 's/\.pptx$//' | sed 's/-/ /g')
            local depth=$2
            local indent=$(printf '%*s' "$depth" '')
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            local metadata=($(get_presentation_metadata "$path"))
            local slides=${metadata[0]}
            local date=${metadata[1]}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            local emoji="üìä"
            local type="–õ–µ–∫—Ü–∏—è"
            if [[ "$title" =~ [–ü–ø]—Ä–∞–∫—Ç–∏–∫ ]]; then
              emoji="üíª"
              type="–ü—Ä–∞–∫—Ç–∏–∫–∞"
            elif [[ "$title" =~ [–î–¥]–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω ]]; then
              emoji="üìö"
              type="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
            fi
            
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å –∏ —Å—Å—ã–ª–∫—É
            echo "${indent}- [ ] ${emoji} [${title}](${path})"
            echo "${indent}  - –¢–∏–ø: ${type}"
            echo "${indent}  - –°–ª–∞–π–¥–æ–≤: ${slides}"
            echo "${indent}  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${date}"
            echo "${indent}  - [–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ]($(dirname "$path")/presentations.md#$(basename "$path" | sed 's/\.pptx$//' | sed 's/[^a-zA-Z0-9]/-/g'))"
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
          function get_presentation_metadata() {
            local file=$1
            python3 -c "
import sys
from pptx import Presentation
try:
    prs = Presentation('$file')
    print(f'{len(prs.slides)}|{prs.core_properties.created.strftime("%Y-%m-%d") if prs.core_properties.created else "Unknown"}')
except:
    print('0|Unknown')
"
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª–µ–º
          function is_module() {
            local dir=$1
            [[ "$(basename "$dir")" =~ ^[0-9]+-.*$ ]] || [[ "$(basename "$dir")" =~ ^–ú–æ–¥—É–ª—å\ [0-9]+.*$ ]]
          }

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –º–æ–¥—É–ª—è
          function get_module_number() {
            local dir=$1
            local name=$(basename "$dir")
            if [[ "$name" =~ ^[0-9]+-.*$ ]]; then
              echo "$name" | sed -E 's/^([0-9]+)-.*/\1/'
            elif [[ "$name" =~ ^–ú–æ–¥—É–ª—å\ [0-9]+.*$ ]]; then
              echo "$name" | sed -E 's/^–ú–æ–¥—É–ª—å\ ([0-9]+).*/\1/'
            else
              echo "999"
            fi
          }

          # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
          function scan_directory() {
            local dir=$1
            local depth=$2
            local is_module_dir=$3
            local module_total=0
            local module_current=0
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –≤ –º–æ–¥—É–ª–µ
            if [ "$is_module_dir" = "true" ]; then
              module_total=$(find "$dir" -name "*.pptx" | wc -l)
            fi
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ .pptx —Ñ–∞–π–ª—ã
            for file in $(find "$dir" -maxdepth 1 -name "*.pptx" | sort); do
              create_link "$file" "$depth" >> temp_toc.md
              if [ "$is_module_dir" = "true" ]; then
                ((module_current++))
              fi
            done
            
            # –°–æ–∑–¥–∞–µ–º presentations.md –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            if [ -n "$(find "$dir" -maxdepth 1 -name "*.pptx")" ]; then
              create_presentations_md "$dir"
            fi
            
            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if [ "$is_module_dir" = "true" ]; then
              # –í –º–æ–¥—É–ª—è—Ö –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
              for subdir in $(find "$dir" -maxdepth 1 -type d | sort); do
                if [ "$subdir" != "$dir" ] && [ "$(basename "$subdir")" != ".git" ] && [ "$(basename "$subdir")" != ".github" ]; then
                  if [ -n "$(find "$subdir" -name "*.pptx")" ]; then
                    echo "" >> temp_toc.md
                    echo "### $(basename "$subdir")" >> temp_toc.md
                    echo "" >> temp_toc.md
                    scan_directory "$subdir" "$((depth + 2))" "false"
                  fi
                fi
              done
              # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –º–æ–¥—É–ª—è
              if [ $module_total -gt 0 ]; then
                echo "" >> temp_toc.md
                echo "#### –ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è" >> temp_toc.md
                create_progress_bar $module_current $module_total >> temp_toc.md
                echo "" >> temp_toc.md
              fi
            else
              # –í –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—â–µ–º –º–æ–¥—É–ª–∏
              for subdir in $(find "$dir" -maxdepth 1 -type d | sort); do
                if [ "$subdir" != "$dir" ] && [ "$(basename "$subdir")" != ".git" ] && [ "$(basename "$subdir")" != ".github" ]; then
                  if is_module "$subdir"; then
                    echo "" >> temp_toc.md
                    echo "## $(basename "$subdir")" >> temp_toc.md
                    echo "" >> temp_toc.md
                    scan_directory "$subdir" "$((depth + 2))" "true"
                  fi
                fi
              done
            fi
          }

          # –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          scan_directory "." 0 "false"

      - name: Update README
        run: |
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README.md
          cp README.md README.md.bak

          # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –Ω–æ–≤—ã–º TOC
          cat temp_toc.md > README.md
          echo "" >> README.md
          echo "---" >> README.md
          echo "" >> README.md
          cat README.md.bak >> README.md

          # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm temp_toc.md README.md.bak

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git add **/presentations.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update README and presentations content" && git push)
